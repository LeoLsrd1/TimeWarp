/*
 * CPOO Server API
 * This is a prototype of CPOO Project's front/back API. 
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@mightycode.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DiscussionDTO;
import org.openapitools.client.model.DiscussionsCreatePostRequest;
import org.openapitools.client.model.ErrorDTO;
import org.openapitools.client.model.MessageDTO;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MessagingApi
 */
@Disabled
public class MessagingApiTest {

    private final MessagingApi api = new MessagingApi();

    /**
     * Create a new discussion
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discussionsCreatePostTest() throws ApiException {
        /*String user1 = "user1";
        String user2 = "user2";

        DiscussionsCreatePostRequest discussionsCreatePostRequest = new DiscussionsCreatePostRequest().user1(user1).user2(user2);
        api.discussionsCreatePost(discussionsCreatePostRequest);

        //search with user1
        List<DiscussionDTO> discussions = api.discussionsUsernameGet("user1");

        Assertions.assertNotNull(discussions);

        DiscussionDTO createdDiscussion = discussions.get(0);
        Assertions.assertEquals(user1, createdDiscussion.getUser1());
        Assertions.assertEquals(user2, createdDiscussion.getUser2());

        //search with user2
        discussions = api.discussionsUsernameGet("user2");
        
        Assertions.assertNotNull(discussions);

        createdDiscussion = discussions.get(0);
        Assertions.assertEquals(user1, createdDiscussion.getUser1());
        Assertions.assertEquals(user2, createdDiscussion.getUser2());

        //Try to create the same discussion
        api.discussionsCreatePost(discussionsCreatePostRequest);
        discussions = api.discussionsUsernameGet("user1");

        Assertions.assertEquals(discussions.size(), 1);*/

    }

    /**
     * Get all messages in a conversation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discussionsDiscussionIdMessagesGetTest() throws ApiException {
        Integer discussionId = null;
        List<MessageDTO> response = api.discussionsDiscussionIdMessagesGet(discussionId);
        // TODO: test validations
    }

    /**
     * Send a message in a disccusion
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discussionsDiscussionIdMessagesPostTest() throws ApiException {
        Integer discussionId = null;
        MessageDTO messageDTO = null;
        api.discussionsDiscussionIdMessagesPost(discussionId, messageDTO);
        // TODO: test validations
    }

    /**
     * Get a list of all discussions of a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discussionsUsernameGetTest() throws ApiException {
        //Tests fonctionne qu'une fois car ajout de données dans la base de donnée
        //TODO: Rendre indépendant
        /*String username = "alice";

        List<DiscussionDTO> response = api.discussionsUsernameGet(username);
        Assertions.assertNotNull(response);

        DiscussionsCreatePostRequest discussionsCreatePostRequest = new DiscussionsCreatePostRequest().user1(username).user2("bob");
        api.discussionsCreatePost(discussionsCreatePostRequest);

        response = api.discussionsUsernameGet(username);
        Assertions.assertEquals(1, response.size());

        discussionsCreatePostRequest = new DiscussionsCreatePostRequest().user1("charlie").user2(username);
        api.discussionsCreatePost(discussionsCreatePostRequest);

        response = api.discussionsUsernameGet(username);
        Assertions.assertEquals(2, response.size());

        api.discussionsCreatePost(discussionsCreatePostRequest);

        response = api.discussionsUsernameGet(username);
        Assertions.assertEquals(2, response.size());

        discussionsCreatePostRequest = new DiscussionsCreatePostRequest().user1("roger").user2(username);
        api.discussionsCreatePost(discussionsCreatePostRequest);

        response = api.discussionsUsernameGet(username);
        Assertions.assertEquals(3, response.size());*/
    }

}
