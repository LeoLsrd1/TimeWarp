/*
 * CPOO Server API
 * This is a prototype of CPOO Project's front/back API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@mightycode.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import okhttp3.Cookie;
import okhttp3.CookieJar;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import org.apache.http.HttpStatus;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.model.UserDTO;

import java.util.ArrayList;
import java.util.List;

/**
 * API tests for AuthenticationApi
 */
public class AuthenticationApiTest {

    private final AuthenticationApi api = new AuthenticationApi();

    public class MyCookieJar implements CookieJar {

        private List<Cookie> cookies;

        @Override
        public void saveFromResponse(HttpUrl url, List<Cookie> cookies) {
            this.cookies = cookies;
        }

        @Override
        public List<Cookie> loadForRequest(HttpUrl url) {
            if (cookies != null)
                return cookies;
            return new ArrayList<>();
        }
    }

    @BeforeEach
    public void init() throws ApiException {
        OkHttpClient.Builder builder = new OkHttpClient.Builder();
        OkHttpClient okHttpClient = builder.cookieJar(new MyCookieJar()).build();
        api.setApiClient(new ApiClient(okHttpClient));
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userSigninPostTest() throws ApiException {

        // Signing in with invalid credentials should fail with UNAUTHORIZED
        UserDTO userDTO = new UserDTO().login("user").password("invalid");
        try {
            api.userSigninPost(userDTO);
            Assertions.fail();
        }
        catch (ApiException e) {
            Assertions.assertEquals(HttpStatus.SC_UNAUTHORIZED, e.getCode());
        }

        // Signing in with valid credential should work
        api.userSigninPost(userDTO.password("user"));

        // Sign in again should fail with CONFLICT
        try {
            api.userSigninPost(userDTO);
            Assertions.fail();
        }
        catch (ApiException e) {
            Assertions.assertEquals(HttpStatus.SC_CONFLICT, e.getCode());
        }
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userSignoutPostTest() throws ApiException {

        // Sign in
        UserDTO userDTO = new UserDTO().login("user").password("user");
        api.userSigninPost(userDTO);

        // Signing out while signed in should work
        api.userSignoutPost();

        // Signing out again should fail with FORBIDDEN
        try {
            api.userSignoutPost();
            Assertions.fail();
        }
        catch (ApiException e) {
            Assertions.assertEquals(HttpStatus.SC_FORBIDDEN, e.getCode());
        }
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userSignupPostTest() throws ApiException {

        // Signing up with a new account should work
        UserDTO userDTO = new UserDTO().login("test").password("test");
        api.userSignupPost(userDTO);

        // Signing up twice with the same account should fail with CONFLICT
        try {
            api.userSignupPost(userDTO);
            Assertions.fail();
        }
        catch (ApiException e) {
            Assertions.assertEquals(HttpStatus.SC_CONFLICT, e.getCode());
        }

        // Signing in with the new account should succeed
        api.userSigninPost(userDTO);

        // Delete the new account
        api.userDeletePost();
    }
}
